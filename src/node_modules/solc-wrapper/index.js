// //////////////////////////////////////////////////////////////////
// var Compiler = require('./src/compiler/compiler')
// var CompilerInput = require('./src/compiler/compiler-input')
// module.exports = { Compiler, CompilerInput }
// => Provides:
//
//     {
//         InternalCallTree: InternalCallTree,
//         SolidityProxy: SolidityProxy,
//         localDecoder: localDecoder,
//         stateDecoder: stateDecoder,
//         CodeAnalysis: CodeAnalysis
//     }
// //////////////////////////////////////////////////////////////////
const wrapper = require('./wrapper.js')
// const solcABI = require('./abi.js')
// const CompilerImport = require('./handle-imports.js')

/******************************************************************************
  MODULE
******************************************************************************/
/*
  triggers
  - compilationFinished
  - compilerLoaded
  - compilationStarted
  - compilationDuration
*/
module.exports = compiler

function compiler (solc) {
  const _compiler = wrapper(solc)
  const api = {}

  Object.keys(_compiler).forEach(key => {
    if (key === 'compile') {
      api.compile = function (sourcecode) {
        // console.error(`[on:compile:start] solc.compile(sourcecode)`)
        var output = _compiler.compile(sourcecode, 1);
        var contracts = output.contracts
        // console.log('output:', output);
        if (output.contracts) {
          var name = Object.keys(contracts)[0];
          if (name) {
            let metadata;
            // console.log('name:', name);
            if (name.indexOf(':') != -1) {
              metadata = contracts[name].metadata;
            } else {
              let name2 = Object.keys(contracts[name])[0];
              metadata = (contracts[name])[name2].metadata;
            }
            metadata = JSON.parse(metadata);
            console.log('=== metadata ===');
            console.dir(metadata);
            return metadata;
          }
        }
        return output;
        // return {
        //   "compiler": { "version": settings.compiler.version },
        //   "language": "Solidity",
        //   "output": {
        //     "abi": JSON.parse(abi)
        //   },
        //   "settings": ,
        //   "sources": {},
        //   "version": 1,
        // }
      }
    }
    else if (typeof _compiler[key] === 'function') api[key] = function (...args) {
      console.error(`compiler.${key}(...args)`, args)
      return _compiler[key].apply(_compiler, args)
    }
    else Object.defineProperty(api, key, {
      get () {
        var currentValue = _compiler[key]
        console.error(`compiler.${key} === `, currentValue)
        return currentValue
      },
      set (newValue) {
        console.error(`compiler.${key} = `, newValue)
        return _compiler[key] = newValue
      },
      enumerable: true,
      configurable: true
    })
  })
  return api
}
